:LaTeX_PROPERTIES:
#+LANGUAGE: de
#+OPTIONS: d:nil todo:nil pri:nil tags:nil
#+OPTIONS: H:4
#+LaTeX_CLASS: orgstandard
#+LaTeX_CMD: xelatex
#+LATEX_HEADER: \usepackage{listings}
:END:

:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_REVEAL_JS_VERSION: 4
#+REVEAL_THEME: league
#+REVEAL_EXTRA_CSS: ./mystyle.css
#+REVEAL_HLEVEL: 2
#+OPTIONS: timestamp:nil toc:nil num:nil
:END:

#+TITLE: Backups mit Linux
#+SUBTITLE: ITS-Net-Lin
#+AUTHOR: Sebastian Meisel


* Einführung
Backups sind ein essenzieller Bestandteil der IT-Sicherheit und Datenverwaltung. Sie gewährleisten, dass Daten nach einem Hardwareausfall, versehentlichem Löschen oder einer Malware-Infektion wiederhergestellt werden können. In dieser Einführung betrachten wir die verschiedenen Arten von Backups und wie diese mit dem Tool =rsync= in Linux umgesetzt werden können.

** Funktionsweise von rsync
Das Tool =rsync= ist ein Programm zur Synchronisation und Sicherung von Dateien, das standardmäßig auf Linux-Systemen installiert ist. Es arbeitet effizient, indem es nur die geänderten Daten zwischen Quelle und Ziel überträgt. =rsync= nutzt dazu sogenannte delta-Transfers, bei denen nur die tatsächlich veränderten Teile einer Datei kopiert werden.

=rsync= muss unter Umständen zunächst installiert werden:

#+BEGIN_SRC bash
sudo apt update                      # wenn letzer Aufruf länger als 24h zurückliegt
sudo apt install rsync
#+END_SRC


** Unterschiedliche Backup-Strategien
Es gibt drei grundlegende Arten von Backups, die sich hinsichtlich Speicherbedarf, Zeitaufwand und Wiederherstellungszeit unterscheiden:

*** Vollbackup
Ein Vollbackup umfasst alle Daten in einem definierten Verzeichnis oder auf einem gesamten Datenträger. Es ist die vollständigste Form des Backups, benötigt aber am meisten Speicherplatz und Zeit.

- *Vorteil*: Einfaches Wiederherstellen, da alle Daten in einem einzigen Backup enthalten sind.
- *Nachteil*: Hoher Speicher- und Zeitaufwand.

Beispiel mit =rsync=:
#+BEGIN_SRC bash
sudo mkdir -p -m 777 /backup/vollbackup
rsync -av --progress /quelle/ /backup/vollbackup/ziel
#+END_SRC

- =mkdir= :: Verzeichnis erstellen:
  - =-p= :: inklusive Elternverzeichnis (/parent/).
  - =-m 777= :: setze die Nutzerrechte: ~rwx = 111 = 7~
- =rsync= :: Verzeichnisse synchronisieren:
  - =-a= (*archive*) :: Aktiviert den Archivmodus, wodurch Dateien rekursiv kopiert und die wichtigsten Attribute (z. B. Rechte, Besitzer, Zeitstempel) beibehalten werden.
  - =-v= (*verbose*) :: Gibt detaillierte Informationen über den Fortschritt aus.
  - =--progress= :: Zeigt den Fortschritt für jede Datei an.


*** Inkrementelles Backup
Ein inkrementelles Backup speichert nur die Änderungen, die seit dem letzten Backup (egal welcher Art) vorgenommen wurden. Es benötigt weniger Speicherplatz und Zeit als ein Vollbackup.

- *Vorteil*: Spart Speicherplatz und Zeit.
- *Nachteil*: Wiederherstellung ist komplexer, da alle inkrementellen Backups seit dem letzten Vollbackup benötigt werden.

Beispiel mit =rsync= und Nutzung eines Zeitstempels:

Um ein inkrementelles Backup zu erstellen, müssen wir stets wissen, welche das letzte Backup war - unabhängig davon, ob es ein Voll-, ein inkrementelles oder differentielles Backup war.

Um das zu erreichen setzen wir zunächst einen [[file:Datei-Links.pdf][Softlink]] auf das Vollbackup:

#+BEGIN_SRC bash
mkdir -p -m 777 /backup/latest/
sudo ln -snf /backup/vollbackup/ziel /backup/latest
#+END_SRC

- =-ln= :: Link erstellen:
  - =-s= :: Softlink erstellen (keinen Hardlink).
  - =-n= :: Stelle sicher, dass ein Link auf das Verzeichnis (nicht in dem Verzeichnis) erstellt wird.
  - =-f= :: Falls bereits ein Link besteht, ersetze ihn.

Nun kann das inkrementelle Backup auf dieser Grundlage erstellt werden:

#+BEGIN_SRC bash
sudo mkdir -p -m 777/backup/inkrementell/
rsync -av --progress --link-dest=../../latest/ /quelle/ /backup/inkrementell/ziel-$(date +%Y%m%d)/
#+END_SRC
- =--link-dest=<Pfad>= :: Verwendet eine Referenz auf ein vorheriges Backup, um Hardlinks zu erstellen. Diese Methode spart Speicherplatz, da unveränderte Dateien nicht erneut kopiert werden. Hier sollte ein relativer Pfad verwendet werden, da dies auch bei Backups auf Remote-Servern funtioniert.

Abschließend muss ein neuer Link erstellt werden:
#+BEGIN_SRC bash
sudo ln -snf /backup/inkrementell/$(ls -1tr ziel* | tail -1) /backup/latest
#+END_SRC

- =$(…)= :: Füge die Ausgabe der Befehle in Klammern als String ein (Subshell).
- =ls= :: Verzeichnisinhalt anzeigen:
  - =-1= :: Eine Datei pro Zeile.
  - =-t= :: Sortiere nach Zeit der letzten Änderung.
  - =-r= :: Umgekehrte Reihenfolge (neueste Datei zuletzt).
- =tail= :: Letzte Zeilen ausgeben:
  - =-1= :: Nur eine (/die/ letzte) Zeile ausgeben.

#+begin_quote
Das Ganz führt dazu, dass jeweils das inkrementelle verlinkt wird, dass zuletzt erstellt wurde.
#+end_quote

*** Differenzielles Backup
Ein differenzielles Backup speichert alle Änderungen seit dem letzten Vollbackup. Es bietet eine Kompromisslösung zwischen Voll- und inkrementellem Backup.

- *Vorteil*: Schneller als ein Vollbackup, aber weniger aufwändig als inkrementelle Backups.
- *Nachteil*: Kann mit der Zeit speicherintensiv werden, da alle Änderungen seit dem letzten Vollbackup enthalten sind.

Beispiel mit =rsync=:
#+BEGIN_SRC bash
sudo mkdir -p -m 777/backup/differenziell/
rsync -av --progress --link-dest=../../vollbackup/ /quelle/ /backup/differenziell/ziel-$(date +%Y%m%d)/
#+END_SRC


** Praktische Hinweise
- Vor einem Backup sollte geprüft werden, ob ausreichend Speicherplatz zur Verfügung steht.
- Automatisierungen mit =cron= oder =systemd= Timer können regelmäßige Backups sicherstellen.
- Es empfiehlt sich, die Backups regelmäßig zu testen, um sicherzustellen, dass die Wiederherstellung im Ernstfall funktioniert.

** Beispiel für ein Backup-Schema mit systemd-Timer
Ein sinnvolles Backup-Schema könnte wie folgt aussehen:
- *Täglich*: Inkrementelle Backups.
- *Wöchentlich*: Differenzielle Backups.
- *Monatlich*: Vollbackups.

Dazu richten wir mit =systemd= einen Service und einen Timer ein.

*** Schritt 1: Backup-Skript erstellen
Erstellen Sie ein Skript, das den Backup-Vorgang ausführt:
#+BEGIN_SRC bash :tangle backup.sh
#!/bin/bash
SUB_DIR="bros"
BACKUP_DIR="/backup"
# Für remote Backups, z.B. BACKUP_DIR="deb:/backup"
SOURCE_DIR="/home/${SUB_DIR}"

# Datum im Format YYYYMMDD
DATE=$(date +%Y%m%d)

FULLB="${BACKUP_DIR}/Vollbackup"
INCRB="${BACKUP_DIR}/Inkrementell/${DATE}"
DIFFB="${BACKUP_DIR}/Differentiell/${DATE}"
LASTB="${BACKUP_DIR}/Latest"

# Backup-Art je nach Argument
case "$1" in
  full)
    # Stelle sicher, dass Zielverzeichnis existiert 
    [[ -d ${FULLB} ]] || mkdir -p -m 777 ${FULLB}
    # Synchronisiere
    rsync -av ${SOURCE_DIR} ${FULLB}
    # Link to Latest
    ln -snf ${FULLB} ${LASTB}
    ;;
  incremental)
    # Stelle sicher, dass Zielverzeichnis existiert 
    [[ -d ${INCRB} ]] || mkdir -p -m 777 ${INCRB}
    # Synchronisiere
    rsync -av --link-dest=../../Latest ${SOURCE_DIR} ${INCRB}
    # Link to Latest
    ln -snf ${INCRB} ${LASTB}
    ;;
  differential)
    # Stelle sicher, dass Zielverzeichnis existiert 
    [[ -d ${DIFFB} ]] || mkdir -p -m 777 ${DIFFB}
    # Synchronisiere
    rsync -av --link-dest=../../Vollbackup ${SOURCE_DIR} ${DIFFB}
    # Link to Latest
    ln -snf ${DIFFB} ${LASTB}
    ;;
  *)
    echo "Usage: $0 {full|differential|incremental}"
    exit 1
    ;;
esac
#+END_SRC

Installieren Sie das Skript unter =/usr/local/bin/backup=:
#+BEGIN_SRC bash
install --own root --group root -m 755 backup.sh /usr/local/bin/backup
#+END_SRC

#+begin_quote
 - =--own root= :: Super-User besitzt die Datei.
 - =--group root= :: Super-User-Gruppe besitzt die Datei.
 - =-m 755= :: Super-User hat volle Rechte (binär =111=), alle anderen nur Lese-, und Ausführungsrechte, aber keine Schreibrechte (binär =101=).
#+end_quote


*** Schritt 2: systemd-Service erstellen
Erstellen Sie eine systemd-Template-Datei =/etc/systemd/system/backup@.service= mit dem Befehl:

#+BEGIN_SRC bash
systemctl --user edit --full --foce backup@.service
#+END_SRC

Der Inhalt der Datei lautet:

#+BEGIN_SRC ini :tangle backup@.service
[Unit]
Description=Backup Service

[Service]
Type=oneshot
ExecStart=/usr/local/bin/backup.sh %i
#+END_SRC

#+begin_quote
 - =Description= :: Beschreibung.
 - =Type=oneshot= :: Einmalig ausführen, dann beeenden.
 - =ExecStart= :: Auszuführender Befehl. =%i= wird durch das ersetzt, dass bei den Timer-Units (s.u.) nach dem =@=-Zeichen steht.
#+end_quote

*** Schritt 3: Timer für Backups erstellen
Erstellen Sie drei Timer-Dateien für die verschiedenen Backup-Typen.

1. Täglicher inkrementeller Timer: =/etc/systemd/system/backup@incremental.timer= mit dem Befehl:

#+BEGIN_SRC bash
systemctl --user edit --full --foce backup@.service
#+END_SRC

Der Inhalt der Datei lautet:

#+BEGIN_SRC ini :tangle backup@incremental.timer
[Unit]
Description=Daily Incremental Backup Timer

[Timer]
OnCalendar=daily
Persistent=true

[Install]
WantedBy=timers.target
#+END_SRC

#+begin_quote
 - =OnCalendar= :: Wann soll der Dienst ausgeführt werden? Mögliche Zeitangaben finden sie unter =man systemd.time=.
 - =Persistent= :: Es wird gespeichert, wann der Dienst zuletzt ausgeführt wurde und nachdem Systemstart sofort ausgeführt, wenn ein geplanter Termin übersprungen wurde.
 - =WantedBy= :: In welcher Phase des Systemstarts soll der Dienst gestartet werden. Diese Angabe ist verpflichtend.
#+end_quote


2. Wöchentlicher differenzieller Timer: =/etc/systemd/system/backup@differential.timer= mit dem Befehl:

#+BEGIN_SRC bash
systemctl --user edit --full --foce backup@.service
#+END_SRC

Der Inhalt der Datei lautet:

#+BEGIN_SRC ini :tangle backup@differential.timer
[Unit]
Description=Weekly Differential Backup Timer

[Timer]
OnCalendar=weekly
Persistent=true

[Install]
WantedBy=timers.target
#+END_SRC

3. Monatlicher Vollbackup-Timer: =/etc/systemd/system/backup@full.timer= mit dem Befehl:

#+BEGIN_SRC bash
systemctl --user edit --full --foce backup@.service
#+END_SRC

Der Inhalt der Datei lautet:

#+BEGIN_SRC ini :tangle backup@full.timer
[Unit]
Description=Monthly Full Backup Timer

[Timer]
OnCalendar=monthly
Persistent=true

[Install]
WantedBy=timers.target
#+END_SRC

*** Schritt 4: Timer aktivieren
Aktivieren Sie die Timer:
#+BEGIN_SRC bash
systemctl enable --now backup@incremental.timer
systemctl enable --now backup@differential.timer
systemctl enable --now backup@full.timer
#+END_SRC

** Moderne Backup-Tools unter Linux
Neben =rsync= gibt es eine Vielzahl moderner Tools, die speziell für Backups entwickelt wurden und viele zusätzliche Funktionen bieten. Neben einer komfortableren Bedienung - hier einige Beispiele:

*** BorgBackup (=borg=)
- *Beschreibung*: Ein modernes deduplizierendes Backup-Tool, das effiziente und sichere Backups ermöglicht.
- *Funktionen*: Datenkomprimierung, Verschlüsselung und effiziente Speicherung durch Deduplizierung.
- *Installation*: 
  #+BEGIN_SRC bash
  sudo apt install borgbackup
  #+END_SRC

*** Restic
- *Beschreibung*: Ein sicheres, schnelles und benutzerfreundliches Backup-Tool, das auf vielen Plattformen läuft.
- *Funktionen*: Verschlüsselung, Unterstützung für mehrere Speichersysteme (lokal, Cloud), inkrementelle Backups.
- *Installation*: 
  #+BEGIN_SRC bash
  sudo apt install restic
  #+END_SRC

*** Duplicity
- *Beschreibung*: Ein Backup-Tool, das Verschlüsselung und inkrementelle Backups mit Unterstützung für viele Remote-Speicherarten (z. B. Amazon S3) bietet.
- *Funktionen*: Verwendet GPG zur Verschlüsselung, ideal für Cloud-Backups.
- *Installation*: 
  #+BEGIN_SRC bash
  sudo apt install duplicity
  #+END_SRC
