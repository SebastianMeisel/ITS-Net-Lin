:LaTeX_PROPERTIES:
#+LANGUAGE: de
#+OPTIONS: d:nil todo:nil pri:nil tags:nil
#+OPTIONS: H:4
#+LaTeX_CLASS: orgstandard
#+LaTeX_CMD: xelatex
#+LATEX_HEADER: \usepackage{listings}
:END:

:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_REVEAL_JS_VERSION: 4
#+REVEAL_THEME: league
#+REVEAL_EXTRA_CSS: ./mystyle.css
#+REVEAL_HLEVEL: 2
#+OPTIONS: timestamp:nil toc:nil num:nil
:END:

#+TITLE: Firewalls unter Linux
#+SUBTITLE: ITS-Net-Lin
#+AUTHOR: Sebastian Meisel

* Einführung

Eine Firewall ist ein sicherheitsrelevantes Netzwerkgerät oder Software, das den Datenverkehr zwischen Netzwerken überwacht und kontrolliert. Unter Linux stehen zahlreiche Tools und Technologien zur Verfügung, um Firewalls zu implementieren. Dieser Text führt in das Konzept einer Stateful Packet Inspection (SPI)-Firewall ein und gibt einen Überblick über gängige Lösungen wie Iptables, Nftables, UFW und Firewalld.

** Das Konzept der SPI-Firewall

Eine SPI-Firewall (Stateful Packet Inspection) überwacht und analysiert den Zustand jeder Verbindung, die durch sie hindurchläuft. Dies bedeutet, dass die Firewall nicht nur die Header-Informationen einzelner Pakete betrachtet, sondern auch den Kontext einer Verbindung beibehält. Dadurch kann sie gezielt entscheiden, welche Pakete erlaubt oder abgelehnt werden sollen. SPI-Firewalls bieten daher eine bessere Kontrolle und Sicherheit im Vergleich zu statischen Paketfiltern.

** Gängige Lösungen unter Linux

*** Iptables
   ~Iptables~ ist ein veraltetes Firewall-Tool, das auf dem Netfilter-Framework basiert. Es ermöglicht die Definition von Regeln, um Netzwerkpakete zu filtern und Weiterleitungsrichtlinien festzulegen.

   ~Iptables~ ist seit Debian seit #welcher Version? nicht mehr vorinstalliert.


Iptables ist seit Debian 10 (Buster) nicht mehr vorinstalliert. Es kann aber nachinstalliert werden:

#+BEGIN_SRC bash
sudo apt update # Wenn nötig
sudo apt install iptables
#+END_SRC

Nun kann man Firewall-Regeln anlegen …

      #+BEGIN_SRC bash
   # Beispiel: Alle eingehenden SSH-Verbindungen erlauben
   sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
   #+END_SRC

… und anzeigen

      #+BEGIN_SRC bash
   # Beispiel: Alle eingehenden SSH-Verbindungen erlauben
   sudo iptables -L
   #+END_SRC

Allerdings ist dies nur ein Kompatiblitätsschicht, die den Übergang zu ~Nftables~ erleichtern soll.

*** Nftables
   ~Nftables~ ist der moderne Nachfolger von ~Iptables~ und bietet eine effizientere Syntax und bessere Leistung. 

*** Erstellen einer Tabelle
   Eine Tabelle wird benötigt, um Regeln und Ketten zu organisieren. Tabellen können verschiedene Protokolle unterstützen (z. B. IPv4, IPv6, ARP).

   #+BEGIN_SRC bash
   # Beispiel: Eine Tabelle für IPv4 anlegen
   sudo nft 'add table ip filter'
   #+END_SRC

#+begin_quote
 - !! Wichtig !! :: Die einfachen Anführungszeichen, sind in diesem Befehl genaugenommen nicht notwendig, aber in anderen. Sie verhindern, dass die Shell bestimmte Zeichen als Befehle interpretiert. Man sollte sich angewöhnen sie immer zu setzen.
#+end_quote

*** Erstellen einer Kette
   Innerhalb einer Tabelle werden Ketten definiert, die für eingehenden, ausgehenden oder weitergeleiteten Verkehr verwendet werden können. 

   #+BEGIN_SRC bash
   # Beispiel: Eine Eingabekette erstellen
   sudo nft 'add chain ip filter input { type filter hook input priority 0; }'
   # Beispiel: Eine Ausgabekette erstellen
   sudo nft 'add chain ip filter output { type filter hook output priority 0; }'
   # Beispiel: Eine Weiterleitungskette erstellen
   sudo nft 'add chain ip filter forward { type filter hook forward priority 0; }'
   #+END_SRC

*** Hinzufügen von Regeln zu einer Kette
   Nachdem eine Tabelle und Ketten erstellt wurden, können Regeln hinzugefügt werden.

   #+BEGIN_SRC bash
   # Beispiel: Eingehende HTTP-Verbindungen in der Eingabekette erlauben
   sudo nft 'add rule ip filter input tcp dport 80 accept'
   #+END_SRC

*Anzeigen und Speichern der Konfiguration*
   Die aktuelle Nftables-Konfiguration kann überprüft und dauerhaft gespeichert werden.

   #+BEGIN_SRC bash
   # Beispiel: Konfiguration anzeigen
   sudo nft list ruleset
   # Beispiel: Konfiguration dauerhaft speichern (je nach Distribution)
   sudo nft list ruleset > /etc/nftables.conf
   #+END_SRC

Mit diesen zusätzlichen Befehlen lässt sich eine vollständige Nftables-Firewall strukturieren und anlegen. Tabellen bieten eine übersichtliche Möglichkeit, Regeln nach Protokoll oder Anwendungszweck zu organisieren.


*** UFW (Uncomplicated Firewall)
   UFW ist ein einfaches Frontend für Iptables und zielt darauf ab, Firewall-Management benutzerfreundlich zu gestalten. Es ist insbesondere bei Ubuntu-Systemen beliebt.

   #+BEGIN_SRC bash
   # Beispiel: HTTP und HTTPS-Verbindungen erlauben
   sudo ufw allow 80/tcp
   sudo ufw allow 443/tcp
   # Beispiel: SSH-Verbindungen deaktivieren
   sudo ufw deny 22
   #+END_SRC

Damit diese Regeln aktiviert werden, muss =ufw= aktiviert werden:

#+BEGIN_SRC bash
  sudo ufw enable
#+END_SRC

Sie können mit =ufw= diese Regel auch leicht wieder deaktivieren:

#+BEGIN_SRC bash
  sudo ufw disable
#+END_SRC



*** *Firewalld*
   Firewalld ist ein dynamisches Firewall-Management-Tool, das die Definition und Verwaltung von Regeln ohne Neustart der Firewall ermöglicht. Es nutzt Zonen, um unterschiedliche Sicherheitsstufen zu implementieren.

   #+BEGIN_SRC bash
   # Beispiel: SSH in der Zone 'public' erlauben
   sudo firewall-cmd --zone=public --add-service=ssh
   # Beispiel: HTTP in der Zone 'public' entfernen
   sudo firewall-cmd --zone=public --remove-service=http
   sudo firewall-cmd --runtime-to-permanent
   #+END_SRC

