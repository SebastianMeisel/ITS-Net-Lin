:LaTeX_PROPERTIES:
#+LANGUAGE: de
#+OPTIONS: d:nil todo:nil pri:nil tags:nil
#+OPTIONS: H:4
#+LaTeX_CLASS: orgstandard
#+LaTeX_CMD: xelatex
:END:

:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_REVEAL_JS_VERSION: 4
#+REVEAL_THEME: league
#+REVEAL_EXTRA_CSS: ./mystyle.css
#+REVEAL_HLEVEL: 2
#+OPTIONS: timestamp:nil toc:nil num:nil
:END:

#+TITLE: Benutzer- und Gruppenrechte in Linux
#+SUBTITLE: ITS-Net-Lin
#+AUTHOR: Sebastian Meisel


* Grundlegendes Konzept der Rechte in Linux
In Linux wird der Zugriff auf Dateien und Verzeichnisse über ein Rechte-System gesteuert:
- Besitzer (=u=) :: Der Benutzer, der die Datei erstellt hat.
- Gruppe (=g=) :: Benutzergruppe, die Zugriff auf die Datei hat.
- Andere (=o=) :: Alle anderen Benutzer.

Rechte werden in drei Kategorien unterteilt:
- Lesen (=r=)
- Schreiben (=w=)
- Ausführen (=x=) - bei Verzeichnissen betreten.

Beispiel für Rechteanzeige:
: -rwxr-xr--

Hier hat:

- Der Nutzer :: Lese- (~r~), Schreib- (~w~) und Ausführungs- (~x~) ~rechte.
- Die Gruppe :: Lese- (~r~), *keine* Schreib (~-~) aber Ausführungs- (~x~) ~rechte.
- Andere :: Nur Lese- (~r~) aber *keine* Schreib (~–~) oder Ausführungs- (~–~) ~rechte.

* Der Befehl =chmod=

#+begin_quote
- !!Wichtig!! :: Die folgenden Befehel können nur von einem Benutzer mit administrativen Rechten (z. B. root) ausgeführt werden.
- Verzeichnisse und Dateien, die zu kritischen Systemkomponenten gehören, sollten sorgfältig verwaltet werden, um Fehlfunktionen zu vermeiden. Nutzen Sie =sudo=
#+end_quote

Mit =chmod= können Rechte für Dateien und Verzeichnisse geändert werden. Es gibt zwei Methoden:
- Symbolisch :: Rechte werden durch Symbole geändert.
  - Beispiel :: =chmod u+rwx,g+r,o-rw datei.txt=
- Numerisch :: Rechte werden durch Oktalwerte angegeben.
  - Beispiel :: =chmod 754 datei.txt=

| Symbol | Bedeutung       | Zahl | Bits | Rechte | Bedeutung                   |
|--------+-----------------+------+------+--------+-----------------------------|
| =u+=     | Nutzer bekommt  |    7 | ~111~  | =rwx=    | Lesen, Schreiben, Ausführen |
| =g+=     | Gruppe bekommt  |    5 | ~101~  | =r-x=    | Lesen, Ausführen            |
| =o+=     | Andere bekommen |    4 | ~100~  | =r--=    | Lesen                       |

Wenn man beim symbolischen Ansatz statt =+= ein =–= benutzt, können damit Rechte entzogen werden.
- Beispiel :: =chmod g-x datei.txt= entfernt die Ausführungsrechte für Gruppenmitglieder

* Verwaltung von Benutzern
** =useradd=
Mit =useradd= wird ein neuer Benutzer erstellt:
#+BEGIN_SRC bash
 useradd  <optionen> <benutzername>
#+END_SRC


Optionen:
- =-m= :: Erstellt ein Home-Verzeichnis.
- =-s= :: Setzt die Standard-Shell (z. B. =/bin/bash=).
- =-G= :: Fügt den Benutzer zu Gruppen hinzu (z. B. =sudo=).

** =usermod=
=usermod= dient zur Änderung von Benutzereigenschaften:
#+BEGIN_SRC bash
 usermod <optionen> <benutzername>
#+END_SRC


Optionen:
- =-G= :: Gruppen ändern.
- =-L= :: Benutzer sperren.
- =-U= :: Benutzer entsperren.

* Verwaltung von Gruppen
** =groupadd=
Erstellt eine neue Gruppe:
#+BEGIN_SRC bash
 groupadd <optionen> <gruppenname>
#+END_SRC


Optionen:
- =-g <GID>= :: Setzt die Gruppen-ID.
- -=U <user>,<user>= :: Fügt der Gruppe Nutzer hinzu.

** =groupmod=
Modifiziert bestehende Gruppen:
#+BEGIN_SRC bash
 groupmod <optionen> <gruppenname>
#+END_SRC


Optionen:
- =-n= :: Ändert den Gruppennamen.
- =-g= :: Ändert die Gruppen-ID.

  * Ändern von Besitzer und Gruppe mit =chown=
Mit =chown= können der Besitzer und/oder die Gruppe einer Datei oder eines Verzeichnisses geändert werden.

** Syntax:
#+BEGIN_SRC bash
 chown [OPTIONEN] <neuer-besitzer>:<neue-gruppe> <datei/ordner>
#+END_SRC

** Beispiele:
- Besitzer ändern:
  #+BEGIN_SRC bash
  chown sebastian datei.txt
  #+END_SRC
  Ändert den Besitzer der Datei =datei.txt= auf den Benutzer =sebastian=.

- Gruppe ändern:
  #+BEGIN_SRC bash
  chown :users datei.txt
  #+END_SRC
  Ändert die Gruppe der Datei =datei.txt= auf =users=.

- Besitzer und Gruppe gleichzeitig ändern:
  #+BEGIN_SRC bash
  chown sebastian:users datei.txt
  #+END_SRC
  Ändert den Besitzer auf =sebastian= und die Gruppe auf =users=.

- Rekursiv ändern:
  #+BEGIN_SRC bash
  chown -R sebastian:users /home/sebastian/
  #+END_SRC
  Ändert Besitzer und Gruppe für alle Dateien und Verzeichnisse im Pfad =/home/sebastian= rekursiv.

** Nützliche Optionen:
- =-R= :: Ändert Besitzer und Gruppe rekursiv für alle Unterverzeichnisse und Dateien.
- =--from= :: Beschränkt Änderungen auf Objekte, die von einem bestimmten Besitzer oder einer bestimmten Gruppe stammen.
  - Beispiel: 
    #+BEGIN_SRC bash
    chown --from=olduser newuser datei.txt
    #+END_SRC

* Das Sticky-Bit

Das Sticky-Bit ist ein spezielles Zugriffsrecht, das hauptsächlich für Verzeichnisse verwendet wird, um die Sicherheit und Integrität von gemeinsam genutzten Ressourcen zu erhöhen. Wenn das Sticky-Bit gesetzt ist, können Dateien innerhalb eines Verzeichnisses nur von ihrem Besitzer, dem Besitzer des Verzeichnisses oder von Benutzern mit administrativen Rechten gelöscht oder umbenannt werden. Andere Benutzer können Dateien in diesem Verzeichnis zwar lesen und bearbeiten, jedoch nicht löschen oder umbenennen.

** Funktion und Zweck des Sticky-Bits
- Schützt Dateien in gemeinsam genutzten Verzeichnissen vor unerwünschtem Löschen oder Umbenennen durch andere Benutzer.
- Wird häufig in Verzeichnissen wie =/tmp= eingesetzt, da dort viele Benutzer Dateien erstellen und bearbeiten.

** Rechteanzeige mit Sticky-Bit
Wenn das Sticky-Bit gesetzt ist, erscheint ein =t= am Ende der Zugriffsrechte des Verzeichnisses:

#+BEGIN_EXAMPLE
drwxrwxrwt
#+END_EXAMPLE

- Das =t= zeigt, dass das Sticky-Bit aktiviert ist.
- Beispiel: Im Verzeichnis =/tmp= haben alle Benutzer Schreibrechte, jedoch schützt das Sticky-Bit die Dateien darin.

** Setzen und Entfernen des Sticky-Bits
Das Sticky-Bit kann mit dem Befehl =chmod= gesetzt oder entfernt werden.

- **Setzen des Sticky-Bits**
  #+BEGIN_SRC bash
  chmod +t <verzeichnis>
  #+END_SRC

  Beispiel:
  #+BEGIN_SRC bash
  chmod +t /shared
  #+END_SRC
  Aktiviert das Sticky-Bit für das Verzeichnis =/shared=.

- **Entfernen des Sticky-Bits**
  #+BEGIN_SRC bash
  chmod -t <verzeichnis>
  #+END_SRC

  Beispiel:
  #+BEGIN_SRC bash
  chmod -t /shared
  #+END_SRC
  Entfernt das Sticky-Bit vom Verzeichnis =/shared=.

** Überprüfen des Sticky-Bits
Mit dem Befehl =ls -ld= kann

#+BEGIN_SRC bash :dir /ssh:debian:~
ls -ld /home/bros
#+END_SRC

#+RESULTS:
: drwxrwx--T 2 sebastian bros 4096 Dec 15 16:38 /home/bros

#+begin_quote
- !! Wichtig !! :: Der Besitzer des Verzeichnisses (hier ~sebastian~) kann nach wie vor jede Datei löschen und umbenennen.
#+end_quote>
