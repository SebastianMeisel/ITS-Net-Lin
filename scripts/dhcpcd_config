#!/usr/bin/env python3
import subprocess
import sys
import os
import re
import ipaddress
from typing import List, Dict

def check_root_privileges() -> bool:
    """Check if script is running with root privileges."""
    return os.geteuid() == 0

def get_network_interfaces() -> List[Dict[str, str]]:
    """Get list of available network interfaces excluding loopback."""
    interfaces = []
    try:
        # List all network interfaces
        for interface in os.listdir('/sys/class/net/'):
            # Skip loopback and virtual interfaces
            if interface != 'lo' and not '.' in interface:
                # Get interface status
                with open(f'/sys/class/net/{interface}/operstate') as f:
                    state = f.read().strip()
                # Get interface MAC address
                with open(f'/sys/class/net/{interface}/address') as f:
                    mac = f.read().strip()
                
                interfaces.append({
                    'name': interface,
                    'state': state,
                    'mac': mac
                })
        return interfaces
    except Exception as e:
        print(f"Error getting network interfaces: {e}")
        return []

def display_network_interfaces(interfaces: List[Dict[str, str]]) -> None:
    """Display available network interfaces in a formatted table."""
    print("\nAvailable Network Interfaces:")
    print("=" * 50)
    print(f"{'Name':<12} {'Status':<10} {'MAC Address':<20}")
    print("-" * 50)
    for interface in interfaces:
        print(f"{interface['name']:<12} {interface['state']:<10} {interface['mac']:<20}")
    print("-" * 50)

def validate_ip_network(network: str) -> bool:
    """Validate IP network in CIDR notation."""
    try:
        ipaddress.ip_network(network)
        return True
    except ValueError:
        return False

def clean_dhcp_config() -> bool:
    """Reset DHCP server configuration."""
    try:
        # Backup original configuration if it exists
        dhcp_conf = '/etc/dhcp/dhcpd.conf'
        if os.path.exists(dhcp_conf):
            backup_file = f'{dhcp_conf}.backup'
            subprocess.run(['cp', dhcp_conf, backup_file], check=True)
        
        # Create new basic configuration
        with open(dhcp_conf, 'w') as f:
            f.write("""# Basic DHCP configuration
default-lease-time 600;
max-lease-time 7200;
authoritative;
""")
        return True
    except Exception as e:
        print(f"Error cleaning DHCP config: {e}")
        return False

def configure_dhcp_server(interface: str, network: str) -> bool:
    """Configure DHCP server for the specified interface."""
    try:
        network_addr = ipaddress.ip_network(network)
        
        # Configure DHCP server
        dhcp_conf = f"""
# DHCP configuration for {interface}
subnet {network_addr.network_address} netmask {network_addr.netmask} {{
    range {network_addr.network_address + 2} {network_addr.broadcast_address - 1};
    option routers {network_addr.network_address + 1};
    option domain-name-servers 8.8.8.8, 8.8.4.4;
    default-lease-time 600;
    max-lease-time 7200;
}}
"""
        # Add DHCP configuration
        with open('/etc/dhcp/dhcpd.conf', 'a') as f:
            f.write(dhcp_conf)
        
        # Configure DHCP server to listen on the interface
        with open('/etc/default/isc-dhcp-server', 'r+') as f:
            content = f.read()
            if 'INTERFACESv4' in content:
                content = re.sub(r'INTERFACESv4=".*"', f'INTERFACESv4="{interface}"', content)
            else:
                content += f'\nINTERFACESv4="{interface}"'
            f.seek(0)
            f.write(content)
            f.truncate()
        
        # Set static IP for the DHCP server interface
        subprocess.run(['ip', 'addr', 'flush', 'dev', interface], check=True)
        subprocess.run(['ip', 'addr', 'add', 
                       f"{network_addr.network_address + 1}/{network_addr.prefixlen}", 
                       'dev', interface], check=True)
        
        # Restart DHCP server
        subprocess.run(['systemctl', 'restart', 'isc-dhcp-server'], check=True)
        return True
    except Exception as e:
        print(f"Error configuring DHCP server: {e}")
        return False

def configure_client_interface(interface: str) -> bool:
    """Configure client interface to use DHCP."""
    try:
        # Flush existing configuration
        subprocess.run(['ip', 'addr', 'flush', 'dev', interface], check=True)
        
        # Enable interface
        subprocess.run(['ip', 'link', 'set', interface, 'up'], check=True)
        
        # Request DHCP address
        subprocess.run(['dhclient', '-r', interface], check=True)
        subprocess.run(['dhclient', interface], check=True)
        
        return True
    except Exception as e:
        print(f"Error configuring client interface: {e}")
        return False

def configure_ip_forwarding() -> bool:
    """Enable IP forwarding."""
    try:
        # Enable IP forwarding immediately
        subprocess.run(['sysctl', '-w', 'net.ipv4.ip_forward=1'], check=True)
        
        # Make IP forwarding persistent
        sysctl_file = '/etc/sysctl.d/99-ip-forward.conf'
        with open(sysctl_file, 'w') as f:
            f.write("# Enable IP forwarding\n")
            f.write("net.ipv4.ip_forward=1\n")
        
        return True
    except Exception as e:
        print(f"Error configuring IP forwarding: {e}")
        return False

def configure_nftables(dhcp_interface: str, client_interface: str, network: str) -> bool:
    """Configure nftables for NAT and forwarding."""
    try:
        network_addr = ipaddress.ip_network(network)
        
        # Create nftables configuration
        nft_rules = f"""#!/usr/sbin/nft -f

# Clear existing rules
flush ruleset

# Define tables and chains
table ip nat {{
    chain prerouting {{
        type nat hook prerouting priority 0;
    }}
    
    chain postrouting {{
        type nat hook postrouting priority 100;
        # Masquerade traffic from DHCP network
        oifname "{client_interface}" ip saddr {network_addr} counter masquerade
    }}
}}

table ip filter {{
    chain input {{
        type filter hook input priority 0;
        policy accept;
    }}
    
    chain forward {{
        type filter hook forward priority 0;
        policy drop;
        
        # Allow established/related connections
        ct state established,related accept
        
        # Allow forwarding from DHCP network to client interface
        iifname "{dhcp_interface}" oifname "{client_interface}" accept
        
        # Allow forwarding to DHCP network for established connections
        iifname "{client_interface}" oifname "{dhcp_interface}" ct state established,related accept
    }}
    
    chain output {{
        type filter hook output priority 0;
        policy accept;
    }}
}}
"""
        # Write nftables rules
        with open('/etc/nftables.conf', 'w') as f:
            f.write(nft_rules)
        
        # Enable and start nftables service
        subprocess.run(['systemctl', 'enable', 'nftables'], check=True)
        subprocess.run(['systemctl', 'restart', 'nftables'], check=True)
        
        return True
    except Exception as e:
        print(f"Error configuring nftables: {e}")
        return False

def install_required_packages() -> bool:
    """Install required packages."""
    try:
        packages = ['isc-dhcp-server', 'nftables', 'dhcpcd']
        print("Checking and installing required packages...")
        subprocess.run(['apt-get', 'update'], check=True)
        subprocess.run(['apt-get', 'install', '-y'] + packages, check=True)
        return True
    except subprocess.CalledProcessError as e:
        print(f"Error installing packages: {e}")
        return False

def main():
    if not check_root_privileges():
        print("This script must be run as root!")
        sys.exit(1)
    
    if not install_required_packages():
        print("Failed to install required packages!")
        sys.exit(1)
    
    print("\nDHCP Server and NAT Configuration Script")
    print("======================================")
    
    # Get and display available interfaces
    interfaces = get_network_interfaces()
    if not interfaces:
        print("No network interfaces found!")
        sys.exit(1)
    
    display_network_interfaces(interfaces)
    
    # Get DHCP server interface
    while True:
        dhcp_interface = input("\nEnter the interface name for DHCP server: ").strip()
        if any(iface['name'] == dhcp_interface for iface in interfaces):
            break
        print("Interface does not exist! Please choose from the list.")
    
    # Get client interface
    while True:
        client_interface = input("Enter the interface name for external connection: ").strip()
        if any(iface['name'] == client_interface for iface in interfaces):
            if client_interface != dhcp_interface:
                break
            print("Please select a different interface than the DHCP server interface.")
        else:
            print("Interface does not exist! Please choose from the list.")
    
    # Get network for DHCP
    while True:
        network = input("Enter network address in CIDR notation (e.g., 192.168.10.0/24): ").strip()
        if validate_ip_network(network):
            break
        print("Invalid network address! Please use CIDR notation (e.g., 192.168.10.0/24)")
    
    # Clean existing DHCP configuration
    print("\nCleaning existing DHCP configuration...")
    if not clean_dhcp_config():
        print("Failed to clean DHCP configuration!")
        sys.exit(1)
    
    # Configure DHCP server
    print("Configuring DHCP server...")
    if not configure_dhcp_server(dhcp_interface, network):
        print("Failed to configure DHCP server!")
        sys.exit(1)
    
    # Configure client interface
    print("Configuring client interface...")
    if not configure_client_interface(client_interface):
        print("Failed to configure client interface!")
        sys.exit(1)
    
    # Configure IP forwarding
    print("Configuring IP forwarding...")
    if not configure_ip_forwarding():
        print("Failed to configure IP forwarding!")
        sys.exit(1)
    
    # Configure nftables
    print("Configuring nftables for NAT and forwarding...")
    if not configure_nftables(dhcp_interface, client_interface, network):
        print("Failed to configure nftables!")
        sys.exit(1)
    
    print("\nConfiguration completed successfully!")
    print(f"DHCP server is running on interface {dhcp_interface}")
    print(f"External connection is configured on interface {client_interface}")
    print(f"DHCP network is configured as {network}")
    print("\nPlease review the configuration files:")
    print("- /etc/dhcp/dhcpd.conf")
    print("- /etc/default/isc-dhcp-server")
    print("- /etc/nftables.conf")
    print("- /etc/sysctl.d/99-ip-forward.conf")

if __name__ == "__main__":
    main()
